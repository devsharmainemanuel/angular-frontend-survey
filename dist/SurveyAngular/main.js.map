{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/login/login.component.css","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/question/question.component.css","webpack:///./src/app/question/question.component.html","webpack:///./src/app/question/question.component.ts","webpack:///./src/app/survey.service.ts","webpack:///./src/app/survey/survey.component.css","webpack:///./src/app/survey/survey.component.html","webpack:///./src/app/survey/survey.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"\\n<nav class=\\\"navbar navbar-dark bg-dark navbar-static-top\\\">\\n  <a class=\\\"navbar-brand\\\" href=\\\"#\\\">\\n    <img src=\\\"\\\" width=\\\"30\\\" height=\\\"30\\\" class=\\\"d-inline-block align-top\\\" alt=\\\"\\\">\\n    Survey\\n  </a>\\n</nav>\\n<div class=\\\"container\\\">\\n  <!-- <app-survey></app-survey> -->\\n  <!-- <app-question></app-question> -->\\n  <app-login></app-login>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { SurveyService } from './survey.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent  {\n  title = 'Survey';\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule, ReactiveFormsModule  } from '@angular/forms';\n\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { SurveyComponent } from './survey/survey.component';\nimport { QuestionComponent } from './question/question.component';\n\nimport { SurveyService } from './survey.service';\nimport { LoginComponent } from './login/login.component';\n@NgModule({\n  declarations: [\n    AppComponent,\n    SurveyComponent,\n    QuestionComponent,\n    LoginComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    FormsModule\n\n  ],\n  providers: [SurveyService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\"","module.exports = \"<div class=\\\"container\\\">\\n  <nav class=\\\"navbar navbar-default\\\">\\n    <div class=\\\"navbar-header\\\">\\n      <a class=\\\"navbar-brand\\\" routerLink=\\\"/dashboard\\\"></a>\\n    </div>\\n    <ul class=\\\"nav navbar-nav\\\">\\n      <li>\\n        <a routerLink=\\\"/deals\\\" routerLinkActive=\\\"active\\\">Deals</a>\\n      </li>\\n      <li>\\n        <a routerLink=\\\"/special\\\" routerLinkActive=\\\"active\\\">Private Deals</a>\\n      </li>\\n    </ul>\\n    <ul class=\\\"nav navbar-nav navbar-right\\\">\\n      <li>\\n        <a>Log In</a>\\n      </li>\\n      <li>\\n        <a>Log Out</a>\\n      </li>\\n    </ul>\\n  </nav>\\n  <div class=\\\"col-sm-12\\\">\\n\\n  </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {FormArray, FormBuilder, FormControl, FormGroup} from '@angular/forms';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent  {\n\n  updateDetailsForm: FormGroup;\n\n  constructor(private formBuilder: FormBuilder) {\n\n  }\n\n\n}\n","module.exports = \"\"","module.exports = \"\\r\\n\\r\\n<div class=\\\"clearfix mt-5\\\"></div>\\r\\n<div class=\\\"row\\\">\\r\\n  <div *ngIf=\\\"myForm != undefined\\\" class=\\\"col-md-12\\\">\\r\\n    <form [formGroup]=\\\"myForm\\\" (submit)=\\\"onSubmit()\\\">\\r\\n     <div class=\\\"card-header\\\">\\r\\n            Name: <input  type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"username\\\">\\r\\n\\r\\n        </div>\\r\\n\\r\\n\\r\\n\\r\\n        <div *ngFor=\\\"let question of questions\\\">\\r\\n            {{question.title}}\\r\\n\\r\\n            <div formArrayName=\\\"quest\\\">\\r\\n                <input type=\\\"text\\\" formControlName=\\\"question.id\\\">\\r\\n            </div>\\r\\n\\r\\n        </div>\\r\\n        <div class=\\\"clearfix mt-2\\\"></div>\\r\\n\\r\\n        <button type=\\\"submit\\\" class=\\\"btn btn-xs btn-primary\\\">Save</button>\\r\\n\\r\\n\\r\\n      </form>\\r\\n    </div>\\r\\n\\r\\n\\r\\n  </div>\\r\\n\"","import { Component, Input, OnInit, AfterViewInit} from '@angular/core';\nimport { FormBuilder, FormGroup, FormControl, FormArray, Validators } from '@angular/forms';\n\n\nimport { SurveyService } from '../survey.service';\nimport { QuestionBase } from '../question-base';\n\n@Component({\n  selector: 'app-question',\n  templateUrl: './question.component.html',\n  styleUrls: ['./question.component.css']\n})\nexport class QuestionComponent implements OnInit , AfterViewInit {\n\n  data = {\n    companies: [\n      {\n        company: 'test',\n        projects: [\n          {\n            projectName: 'test',\n          }\n        ]\n      }\n    ]\n  };\n\n  surveyObject = [];\n\n\n  myForm: FormGroup;\n  questions: QuestionBase<any>[] = [];\n  options =  [];\n  constructor(private fb: FormBuilder, private dataService: SurveyService) {\n\n\n  }\n\n  ngOnInit() {\n\n    const arr = [];\n    this.dataService.getQuestions().subscribe(data => {\n      this.questions = data;\n\n\n      console.log(this.questions);\n      for (let i = 0; i < data.length; i++) {\n          arr.push(this.buidlData(data[i]));\n\n      }\n\n      this.myForm = this.fb.group({\n        survey_id: [''],\n        username: new FormControl('', Validators.required),\n        quest: this.fb.array([]),\n        question_id: new FormControl()\n      });\n\n    });\n\n  }\n\n  onSubmit() {\n    console.log(this.myForm.value);\n\n  //   this.dataService.submitAnswers(this.myForm.value).subscribe(data => {\n  //     console.log(data);\n  // });\n  }\n\n\n  get quest(): FormArray {\n    return this.myForm.get('quest') as FormArray;\n  }\n\n\n  ngAfterViewInit() {\n      console.log(this.myForm);\n  }\n\n\n  buidlData(questions): FormGroup {\nthis.options.push(questions.options);\n\nconst allOptions: FormArray = new FormArray([]);\nfor (let i = 0; i < questions.options.length; i++) {\n  console.log(questions.options[i]);\n  const fg = new FormGroup({});\n  fg.addControl(questions.options[i].id, new FormControl(false));\n  allOptions.push(fg);\n}\n\n\n\n    return this.fb.group({\n      title: [questions.title],\n      type: [questions.question_type],\n      options: [questions.options],\n      id: [questions.id],\n      options_value: allOptions,\n      value: ['']\n    });\n\n  }\ninitOptions() {\n  return new FormGroup({\n    text: new FormControl(),\n    id: new FormControl()\n  });\n}\n\n\ngetValue(id) {\n  console.log(id);\n}\n\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { QuestionBase } from 'src/app/question-base';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Response, Headers } from '@angular/http';\n\n\n\ninterface MyData {\n  obj: any[];\n}\n@Injectable({\n  providedIn: 'root'\n})\nexport class SurveyService {\n\n  constructor(private http: HttpClient) { }\n  public base_url = 'http://laravel-backend-survey.loc/api';\n\n\n  getQuestions() {\n    return this.http.get<QuestionBase<any>[]>(this.base_url + '/questions');\n  }\n\n\n  submitSurvey(data) {\n\n    const surveys = {\n      'answers': data\n    };\n    console.log(surveys);\n    return this.http.post(this.base_url + '/survey/submit', surveys);\n  }\n\n\n  submitAnswers(data) {\n        console.log(data);\n        return this.http.post(this.base_url + '/survey/submit', data);\n      }\n\n\n\n\n\n\n  toFormGroup(questions: QuestionBase<any>[] ) {\n    const group: any = {};\n\n    questions.forEach(question => {\n\n//console.log(group[question.id]);\n\n      group[question.id] = question.id ? new FormControl(question.id || '', Validators.required)\n      : new FormControl(question.id || '');\n    });\n    return new FormGroup(group);\n  }\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"clearfix mt-5\\\"></div>\\n<div class=\\\"row\\\">\\n  <div class=\\\"col-md-12 \\\">\\n\\n    <form #answer=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit(answer.value)\\\" >\\n      <div class=\\\"card-header\\\">\\n        Name: <input  type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"username\\\" ngModel>\\n\\n      </div>\\n\\n\\n\\n      <div class=\\\"card mt-2\\\" *ngFor=\\\"let question of questions\\\">\\n        <div class=\\\"card-header\\\">\\n          {{ question.title }}\\n\\n        </div>\\n        <div class=\\\"card-body\\\">\\n\\n          <input *ngIf=\\\"question.question_type == 'fillintheblank'\\\" type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"{{question.id}}\\\" ngModel>\\n\\n          <textarea *ngIf=\\\"question.question_type == 'textarea'\\\" type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"{{question.id}}\\\" ngModel></textarea>\\n          <!-- SINGLE CORRECT -->\\n          <div class=\\\"row\\\"  *ngIf=\\\"question.question_type == 'single'\\\">\\n              <div class=\\\"col-md-6\\\" *ngFor=\\\"let option of question.options; let i = index\\\">\\n                  <div ngModelGroup=\\\"{{question.id}}\\\">\\n                    <input type=\\\"radio\\\" name=\\\"{{option.id}}\\\" ngModel> {{ option.text }}\\n                  </div>\\n\\n                </div>\\n          </div>\\n          <!-- END SINGLE CORRECT -->\\n\\n\\n          <!-- RATINGS -->\\n          <div class=\\\"row\\\"  *ngIf=\\\"question.question_type == 'ratings'\\\">\\n            <div class=\\\"col-md-2 col-md-offset-1\\\">\\n\\n              <input type=\\\"radio\\\" value=\\\"1\\\"  required name=\\\"{{question.id}}\\\" ngModel> 1\\n            </div>\\n            <div class=\\\"col-md-2\\\">\\n              <input type=\\\"radio\\\" value=\\\"2\\\"  required name=\\\"{{question.id}}\\\" ngModel> 2\\n            </div>\\n            <div class=\\\"col-md-2\\\">\\n              <input type=\\\"radio\\\" value=\\\"3\\\"  required name=\\\"{{question.id}}\\\" ngModel> 3\\n            </div>\\n            <div class=\\\"col-md-2\\\">\\n              <input type=\\\"radio\\\" value=\\\"4\\\"  required name=\\\"{{question.id}}\\\" ngModel> 4\\n            </div>\\n            <div class=\\\"col-md-2\\\">\\n              <input type=\\\"radio\\\" value=\\\"5\\\"  required name=\\\"{{question.id}}\\\" ngModel> 5\\n            </div>\\n          </div>\\n          <!-- END RATINGS -->\\n\\n          <!-- MULTIPLE CORRECT -->\\n          <div class=\\\"row\\\"  *ngIf=\\\"question.question_type == 'multiple'\\\">\\n            <div class=\\\"col-md-12\\\" *ngFor=\\\"let option of question.options; let i = index\\\">\\n              <div ngModelGroup=\\\"{{question.id}}\\\">\\n                <input type=\\\"checkbox\\\" name=\\\"{{option.id}}\\\" ngModel> {{ option.text }}\\n              </div>\\n\\n            </div>\\n\\n          </div>\\n          <!-- END MULTIPLE CORRECT -->\\n\\n        </div>\\n      </div>\\n      <div class=\\\"clearfix mt-2\\\"></div>\\n\\n      <button type=\\\"submit\\\" class=\\\"btn btn-xs btn-primary\\\">Save</button>\\n\\n\\n    </form>\\n  </div>\\n</div>\\n\"","import { Component, Input, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, FormControl, FormArray, Validators} from '@angular/forms';\n\nimport { SurveyService } from '../survey.service';\nimport { QuestionBase } from '../question-base';\n\n@Component({\n  selector: 'app-survey',\n  templateUrl: './survey.component.html',\n  styleUrls: ['./survey.component.css'],\n})\nexport class SurveyComponent implements OnInit {\n\n  @Input() questions: QuestionBase<any>[] = [];\n  surveys = [];\n  options = [];\n  form: FormGroup;\n  payLoad = '';\n\n  constructor(private dataService: SurveyService) {\n\n  }\n  ngOnInit() {\n\n    // get data from the api and store to question-base//\n    this.dataService.getQuestions().subscribe(data => {\n      this.questions = data;\n   //   this.form = this.dataService.toFormGroup(data);\n\n    });\n  }\n\n  buildForm() {\n\n    this.form = new FormGroup({\n      'username': new FormControl('', [\n        Validators.required,\n        Validators.minLength(4)  ]),\n    });\n  }\n\n  onSubmit = function(answer) {\n    // display submitted data\n    const answers = answer;\n    console.log(answers);\n    // this.dataService.submitSurvey(answer).subscribe(data => {\n    //     console.log(data);\n    // });\n  };\n\n  check(value1) {\n    return (value1.filter(item => item.id)).length;\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}